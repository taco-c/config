#!/usr/bin/env bash

# this is a simple config for herbstluftwm

hc() {
    herbstclient "$@"
}

scratch() {
	case "$1" in
		term) entry="alacritty" ;;
		calc) entry="gnome-calculator" ;;
		mail) entry="thunderbird" ;;
		nn) entry="$TERMINAL -e nn.sh ~/notater" ;;
	esac

	xdotool search --onlyvisible --name "$1" windowunmap \
	|| xdotool search --name "$1" windowmap \
	|| $entry &
}

hc emit_hook reload

autorandr --change
xsetroot -solid '#5A8E3A'
xset dpms 3600 0 0
xwallpaper --zoom $HOME/.config/wallpaper &
setxkbmap -option caps:escape -option numpad:mac

[ -z "$(pgrep unclutter)" ] && unclutter &
#[ -z "$(pgrep redshift)" ] && redshift -t 5500:3500 -l 59.916911:10.727567 &

# remove all existing keybindings
hc keyunbind --all

# keybindings
Mod=Mod4

hc keybind $Mod-Shift-q quit
hc keybind $Mod-Shift-r reload
hc keybind $Mod-q close
hc keybind $Mod-Return spawn "${TERMINAL:-xterm}"

hc keybind $Mod-m spawn hlwm-q3terminal.sh mail

# Volume
hc keybind XF86AudioRaiseVolume spawn pactl set-sink-volume 0 +5%
hc keybind XF86AudioLowerVolume spawn pactl set-sink-volume 0 -5%
hc keybind XF86AudioMute spawn pactl set-sink-mute 0 toggle
hc keybind $Mod-Next spawn pactl set-sink-volume 0 +5%
hc keybind $Mod-Prior spawn pactl set-sink-volume 0 -5%

# basic movement in tiling and floating mode
# focusing clients
hc keybind $Mod-h     focus left
hc keybind $Mod-j     focus down
hc keybind $Mod-k     focus up
hc keybind $Mod-l     focus right

# moving clients in tiling and floating mode
hc keybind $Mod-Shift-h     shift left
hc keybind $Mod-Shift-j     shift down
hc keybind $Mod-Shift-k     shift up
hc keybind $Mod-Shift-l     shift right

# splitting frames
# create an empty frame at the specified direction
hc keybind $Mod-u chain , split bottom 0.5 , focus down
hc keybind $Mod-o chain , split right  0.5 , focus right
# let the current frame explode into subframes
hc keybind $Mod-Control-space split explode

# resizing frames and floating clients
resizestep=0.02
hc keybind $Mod-Control-h       resize left +$resizestep
hc keybind $Mod-Control-j       resize down +$resizestep
hc keybind $Mod-Control-k       resize up +$resizestep
hc keybind $Mod-Control-l       resize right +$resizestep

# tags
#tag_names=( {1..9} )
#tag_keys=( {1..9} 0 )

#hc rename default "${tag_names[0]}" || true
#for i in "${!tag_names[@]}" ; do
    #hc add "${tag_names[$i]}"
    #key="${tag_keys[$i]}"
    #if [ -n "$key" ] ; then
        #hc keybind "$Mod-$key" use_index "$i"
        #hc keybind "$Mod-Shift-$key" move_index "$i"
    #fi
#done

# cycle through tags
#hc keybind $Mod-period use_index +1 --skip-visible
#hc keybind $Mod-comma  use_index -1 --skip-visible

mon1_names=( 1_{1..5} ) # tag names for monitor 1
mon2_names=( 2_{1..5} ) # tag names for monitor 2
fallback_names=( {1..5} ) # tag names for all other monitors
tag_keys=( {1..9} 0 )

hc rename default "${mon1_names[0]}" || true
for tag in "${mon1_names[@]}" "${mon2_names[@]}" "${fallback_names[@]}" ; do
    hc try silent add "$tag"
done

for i in ${!tag_keys[@]} ; do
    key="${tag_keys[$i]}"
    # the keybinding works as follows: the or executes the commands separated by
    # CASE and stops executing them after the first of those succeeds.
    # the first command is: check that we are on monitor 3 and can switch to tag "${mon1_names[$i]}"
    # if only one of these two steps fail, try the second one (and so one).
    # The setup for two monitors is as follows:
    hc keybind "$Mod-$key" \
        or CASE and . compare monitors.focus.index = 0 . use "${mon1_names[$i]}" \
           CASE and . compare monitors.focus.index = 1 . use "${mon2_names[$i]}" \
           CASE use "${fallback_names[$i]}"
    hc keybind "$Mod-Shift-$key" \
        or CASE and . compare monitors.focus.index = 0 . move "${mon1_names[$i]}" \
           CASE and . compare monitors.focus.index = 1 . move "${mon2_names[$i]}" \
           CASE move "${fallback_names[$i]}"
done

# cycle through tags
# add additional information in order to cycle only through a monitor's tags
# and not through all tags
define-tag-cycle() {
    local n=$#
    local tags=( "$@" )
    for i in "${!tags[@]}" ; do
        local t="${tags[$i]}"
        hc chain , new_attr string tags.by-name."$t".my_previous_tag \
                 , set_attr tags.by-name."$t".my_previous_tag "${tags[$(((i - 1 + n) % n))]}" \
                 , new_attr string tags.by-name."$t".my_next_tag \
                 , set_attr tags.by-name."$t".my_next_tag "${tags[$(((i + 1) % n))]}"
    done
}

define-tag-cycle "${mon1_names[@]}"
define-tag-cycle "${mon2_names[@]}"
define-tag-cycle "${fallback_names[@]}"

# cycle through tags
# check whether the current tag as a custom "next tag" configured
# if yes, jump to that one, otherwise fall back to ordinary use_index +1
hc keybind $Mod-period or , substitute NEXT tags.focus.my_next_tag use NEXT  \
                          , use_index +1 --skip-visible
hc keybind $Mod-comma  or , substitute PREV tags.focus.my_previous_tag use PREV  \
                          , use_index +1 --skip-visible

hc set swap_monitors_to_get_tag 0

# layouting
hc keybind $Mod-r remove
hc keybind $Mod-s floating toggle
hc keybind $Mod-f fullscreen toggle
hc keybind $Mod-Shift-f set_attr clients.focus.floating toggle
hc keybind $Mod-Shift-d set_attr clients.focus.decorated toggle
hc keybind $Mod-Shift-m set_attr clients.focus.minimized true
hc keybind $Mod-Control-m jumpto last-minimized
hc keybind $Mod-p pseudotile toggle
# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-space                                                           \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 vertical horizontal max vertical grid    \
               , cycle_layout +1

# mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
#hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# focus
hc keybind $Mod-BackSpace   cycle_monitor
#hc keybind $Mod-Tab         cycle_all +1
#hc keybind $Mod-Shift-Tab   cycle_all -1
hc keybind $Mod-Tab spawn rofi -show run
hc keybind $Mod-c cycle
hc keybind $Mod-i jumpto urgent

# Theme
border=2

# Dunno
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1

# Frame
hc set frame_border_width 0
hc set frame_border_active_color '#FFFFFF'
hc set frame_border_normal_color '#101010FF'
hc set frame_bg_normal_color '#00FF00'
hc set frame_bg_active_color '#FFFFFF'
#hc set show_frame_decorations 'focused_if_multiple'
hc set show_frame_decorations 'if_empty'
hc set frame_bg_transparent on
hc set frame_transparent_width $border
hc set frame_gap 10
hc set frame_padding 0
hc set smart_frame_surroundings on # single frame has no margins

# Window
hc attr theme.border_width $border
hc set window_gap 0
hc set smart_window_surroundings off
hc attr settings.focus_follows_mouse true
hc attr theme.active.color '#FFFFFF'
hc attr theme.title_color '#ffffff'
hc attr theme.normal.color '#000000FF'
hc attr theme.urgent.color '#7811A1dd'
hc attr theme.tab_color '#1F1F1Fdd'
hc attr theme.active.tab_color '#2B4F0Add'
hc attr theme.active.tab_outer_color '#6C8257dd'
hc attr theme.active.tab_title_color '#ababab'
#hc attr theme.normal.title_color '#898989'
hc attr theme.inner_width 0
hc attr theme.inner_color '#ffffff'
hc attr theme.floating.border_width $border
hc attr theme.floating.outer_width 0
hc attr theme.floating.outer_color black
#hc attr theme.active.inner_color '#FFFFFF'
#hc attr theme.urgent.inner_color '#9A65B0'
#hc attr theme.normal.inner_color '#606060'
# copy inner color to outer_color
#for state in active urgent normal ; do
    #hc substitute C theme.${state}.inner_color \
        #attr theme.${state}.outer_color C
#done
hc attr theme.tiling.outer_width 0
hc attr theme.background_color '#141414'

# Window title
#hc attr theme.title_height 15
#hc attr theme.title_when always
#hc attr theme.title_font 'Ubuntu:pixelsize=12'  # example using Xft
## hc attr theme.title_font '-*-fixed-medium-r-*-*-13-*-*-*-*-*-*-*'
#hc attr theme.title_depth 3  # space below the title's baseline
##hc attr theme.active.color '#345F0Cef'

hc set mouse_recenter_gap 0

# rules
hc unrule -F
#hc rule class=XTerm tag=3 # move all xterms to tag 3
hc rule focus=on # normally focus new clients
hc rule floatplacement=smart
#hc rule focus=off # normally do not focus new clients
# give focus to most common terminals
#hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' floating=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off
hc rule fixedsize floating=on

hc set tree_style '╾│ ├└╼─┐'

# unlock, just to be sure
hc unlock

# do multi monitor setup here, e.g.:
# hc set_monitors 1280x1024+0+0 1280x1024+1280+0
# or simply:
hc detect_monitors

# find the panel
panel=~/.config/herbstluftwm/panel.sh
[ -x "$panel" ] || panel=/etc/xdg/herbstluftwm/panel.sh
for monitor in $(hc list_monitors | cut -d: -f1) ; do
    # start it on each monitor
    "$panel" "$monitor" &
done
